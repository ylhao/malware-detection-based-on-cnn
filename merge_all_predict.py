# coding: utf-8


import os
import h5py
import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from keras.applications import resnet50, inception_v3, xception
from keras.applications.resnet50 import ResNet50
from keras.applications.inception_v3 import InceptionV3
from keras.applications.xception import Xception
from keras.layers.core import Lambda
from keras.layers import Input, GlobalAveragePooling2D, GlobalMaxPooling2D, Dense, Dropout
from keras.models import Model
from keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau
from keras.optimizers import adam, Adam
from sklearn.utils import shuffle
from keras.utils import to_categorical
from keras.utils.vis_utils import plot_model
from loss_history import LossHistory
from keras.models import load_model
import time
from keras import backend as K
K.clear_session()


# -------------------------------------
# 定义参数
# -------------------------------------
BATCH_SIZE = 128


# -------------------------------------
# 文件路径
# -------------------------------------
TEST_DATA_PATH = './data/valid/'
RESULT_PATH = './result/'
OUTPUT_PATH = './output/'


def predict():

    X_test = []

    filenames = [os.path.join(OUTPUT_PATH, 'inceptionv3-finetune-output.hdf5'),
                 os.path.join(OUTPUT_PATH, 'resnet50-finetune-output.hdf5'),
                 os.path.join(OUTPUT_PATH, 'xception-finetune-output.hdf5'),
                 os.path.join(OUTPUT_PATH, 'vgg16-finetune-output.hdf5')]

    for filename in filenames:
        with h5py.File(filename, 'r') as h:
            X_test.append(np.array(h['X_val']))
            y_test = np.array(h['y_val'])

    for x in X_test:
        print(x.shape)

    X_test = np.concatenate(X_test, axis=1)

    # check
    print('X_test shape:', X_test.shape)
    print('y_test shape:', y_test.shape)

    model = load_model('./model/merge-model-01.hdf5')
    pred = model.predict(X_test, batch_size=128)
    predicted_class_indices = np.argmax(pred, axis=1)
    
    mm = 0
    mn = 0
    nm = 0
    nn = 0
    
    for idx, y in enumerate(y_test):
        if y == 0 and predicted_class_indices[idx] == 0:
            mm += 1
        elif y == 0 and predicted_class_indices[idx] == 1:
            mn += 1
        elif y == 1 and predicted_class_indices[idx] == 1:
            nn += 1
        elif y == 1 and predicted_class_indices[idx] == 0:
            nm += 1

    total = mm + mn + nm + nn
    m_total = mm + mn
    n_total = nm + nn

    print('正确率：', (mm + nn) / total * 100)
    print('误报率：', nm / n_total * 100)
    print('漏报率:', mn / m_total * 100)

    K.clear_session()


if __name__ == '__main__':
    predict()

